import requests
from bs4 import BeautifulSoup
import urllib3
from dotenv import load_dotenv
import os
import time
from datetime import datetime

def parse_cookies_from_browser(cookie_string):
    """–ü–∞—Ä—Å–∏–º –∫—É–∫–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞"""
    cookies = {}
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ —Ç–æ—á–∫–µ —Å –∑–∞–ø—è—Ç–æ–π
    cookie_parts = cookie_string.split(';')
    
    # –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å - —ç—Ç–æ —Å–∞–º–∞ –∫—É–∫–∞ name=value
    if cookie_parts and '=' in cookie_parts[0]:
        name, value = cookie_parts[0].strip().split('=', 1)
        cookies[name] = value
    
    # –ò—â–µ–º –¥—Ä—É–≥–∏–µ –∫—É–∫–∏ –≤ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —á–∞—Å—Ç—è—Ö
    for part in cookie_parts[1:]:
        part = part.strip()
        if '=' in part:
            name, value = part.split('=', 1)
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∞—Ç—Ä–∏–±—É—Ç—ã (Expires, Path, HttpOnly –∏ —Ç.–¥.)
            if name.lower() not in ['expires', 'path', 'domain', 'httponly', 'secure', 'samesite']:
                cookies[name] = value
    
    return cookies

def get_detectors_status(ip, session):
    """–ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤"""
    try:
        response = session.get(f"https://{ip}/detectors/status", verify=False, timeout=5)
        
        if response.status_code == 200 and "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è" not in response.text:
            soup = BeautifulSoup(response.text, 'html.parser')
            
            # –ù–∞—Ö–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É —Å –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞–º–∏
            detectors_table = soup.find('tbody', {'id': 'table_detectors'})
            if not detectors_table:
                return None
            
            detectors = []
            rows = detectors_table.find_all('tr')
            
            for row in rows:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
                cells = row.find_all('td')
                if len(cells) >= 5:
                    # –ù–æ–º–µ—Ä –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
                    det_number = cells[0].get_text(strip=True)
                    # –ù–æ–º–µ—Ä –≤—Ö–æ–¥–∞
                    input_number = cells[1].get_text(strip=True)
                    # –¢–∏–ø –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
                    det_type = cells[2].get_text(strip=True)
                    # –°—Ç–∞—Ç—É—Å
                    status_span = cells[3].find('span', {'id': 'det_status'})
                    status = status_span.get_text(strip=True) if status_span else "N/A"
                    # –ö–ª–∞—Å—Å —Å—Ç–∞—Ç—É—Å–∞ (–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–≤–µ—Ç)
                    status_class = status_span.get('class', []) if status_span else []
                    
                    # –†–µ–∂–∏–º —É—Å—Ç–∞–Ω–æ–≤–∫–∏
                    state_select = cells[4].find('select', {'name': 'state[]'})
                    state_text = "N/A"
                    if state_select:
                        selected_option = state_select.find('option', selected=True)
                        if selected_option:
                            state_text = selected_option.get_text(strip=True)
                    
                    detectors.append({
                        'number': det_number,
                        'input': input_number,
                        'type': det_type,
                        'status': status,
                        'status_class': status_class,
                        'state': state_text
                    })
            
            return detectors
        else:
            return None
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return None

def write_to_log(message):
    """–ó–∞–ø–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥-—Ñ–∞–π–ª"""
    log_entry = f"{message}\n"
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    log_dir = "logs_https"
    if not os.path.exists(log_dir):
        os.makedirs(log_dir)
    
    # –ò–º—è —Ñ–∞–π–ª–∞ —Å –¥–∞—Ç–æ–π
    log_filename = f"{log_dir}/detectors_log_{datetime.now().strftime('%Y%m%d')}.txt"
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
    with open(log_filename, "a", encoding="utf-8") as log_file:
        log_file.write(log_entry)

def format_detectors_for_log(detectors):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –ª–æ–≥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DT X = EMOJI STATUS"""
    if not detectors:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä—ã –ø–æ –Ω–æ–º–µ—Ä—É
    sorted_detectors = sorted(detectors, key=lambda x: int(x['number']))
    
    log_entries = []
    for det in sorted_detectors:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞
        if det['status'] == '1':
            status_emoji = "üü¢"
        elif det['status'] == '0':
            status_emoji = "‚ö™"
        else:
            status_emoji = "‚ùì"
        
        log_entries.append(f"DT {det['number']} = {status_emoji} {det['status']}")
    
    return " , ".join(log_entries)

def monitor_detectors(ip):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤ - —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞"""
    
    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
    
    session = requests.Session()
    
    # –ü–æ–ª—É—á–∞–µ–º –∫—É–∫–∏ –∏–∑ .env —Ñ–∞–π–ª–∞
    browser_cookies = os.getenv('BROWSER_COOKIES')
    if not browser_cookies:
        print("‚ùå BROWSER_COOKIES –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ")
        write_to_log("‚ùå BROWSER_COOKIES –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ")
        return
    
    stolen_cookies = parse_cookies_from_browser(browser_cookies)
    
    for name, value in stolen_cookies.items():
        session.cookies.set(name, value)
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–∞–∫ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
    session.headers.update({
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
        'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
    })
    
    print("üö¶ –ú–û–ù–ò–¢–û–†–ò–ù–ì –î–ï–¢–ï–ö–¢–û–†–û–í (–Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π —Ä–µ–∂–∏–º)")
    print("=" * 60)
    
    iteration = 0
    
    try:
        while True:
            iteration += 1
            
            # –§–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
            request_time = datetime.now()
            request_timestamp = request_time.strftime("%H:%M:%S.%f")[:-3]
            
            detectors = get_detectors_status(ip, session)
            
            # –§–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
            response_time = datetime.now()
            response_timestamp = response_time.strftime("%H:%M:%S.%f")[:-3]
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
            request_duration_ms = (response_time - request_time).total_seconds() * 1000
            
            if detectors:
                print(f"\n[{request_timestamp}] –ó–∞–ø—Ä–æ—Å #{iteration}")
                print(f"[{response_timestamp}] –û—Ç–≤–µ—Ç #{iteration} - –í—Ä–µ–º—è: {request_duration_ms:.0f} –º—Å")
                print(f"–ù–∞–π–¥–µ–Ω–æ –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤: {len(detectors)}")
                print("-" * 60)
                
                # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–µ–∫—Ç–æ—Ä—ã –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                for det in detectors:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞
                    if det['status'] == '1':
                        status_emoji = "üü¢"
                    elif det['status'] == '0':
                        status_emoji = "‚ö™"
                    else:
                        status_emoji = "‚ùì"
                    
                    print(f"–î–µ—Ç–µ–∫—Ç–æ—Ä {det['number']:>3} | –í—Ö–æ–¥ {det['input']:>2} | –°—Ç–∞—Ç—É—Å: {status_emoji} {det['status']}")
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è –ª–æ–≥–∞ –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                log_message = f"–ó–∞–ø—Ä–æ—Å: {request_timestamp}, –û—Ç–≤–µ—Ç: {response_timestamp}, –í—Ä–µ–º—è: {request_duration_ms:.0f} –º—Å - {format_detectors_for_log(detectors)}"
                write_to_log(log_message)
                
            else:
                print(f"\n[{request_timestamp}] –ó–∞–ø—Ä–æ—Å #{iteration}")
                print(f"[{response_timestamp}] –û—Ç–≤–µ—Ç #{iteration} - –í—Ä–µ–º—è: {request_duration_ms:.0f} –º—Å")
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤")
                log_message = f"–ó–∞–ø—Ä–æ—Å: {request_timestamp}, –û—Ç–≤–µ—Ç: {response_timestamp}, –í—Ä–µ–º—è: {request_duration_ms:.0f} –º—Å - ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤"
                write_to_log(log_message)
            
            # –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
            # –ù–µ—Ç –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        write_to_log("‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    load_dotenv()
    ip = os.getenv('IP')
    
    if not ip:
        print("‚ùå IP –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        exit(1)
    
    print("üîç –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤ (–Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π —Ä–µ–∂–∏–º)...")
    monitor_detectors(ip)
