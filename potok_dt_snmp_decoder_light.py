import asyncio
import ipaddress
import time
from pysnmp.hlapi.asyncio import *

async def snmp_get_request(ip, community, oid):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π SNMP GET –∑–∞–ø—Ä–æ—Å"""
    error_indication, error_status, error_index, var_binds = await getCmd(
        SnmpEngine(),
        CommunityData(community),
        UdpTransportTarget((ip, 161)),
        ContextData(),
        ObjectType(ObjectIdentity(oid)),
        lexicographicMode=True,
    )
    
    if error_indication:
        return None
    if error_status:
        return None

    for name, val in var_binds:
        return val.prettyPrint()

async def snmp_get_next_request(ip, community, oid):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π SNMP GET NEXT –∑–∞–ø—Ä–æ—Å"""
    error_indication, error_status, error_index, var_binds = await nextCmd(
        SnmpEngine(),
        CommunityData(community),
        UdpTransportTarget((ip, 161)),
        ContextData(),
        ObjectType(ObjectIdentity(oid)),
        lexicographicMode=True,
    )

    if error_indication:
        return None
    if error_status:
        return None

    # –ò–∑–≤–ª–µ–∫–∞–µ–º SCN
    co = var_binds[0][0][1].prettyPrint()
    len_scn = str(len(co)) + "."
    scn = [str(ord(c)) for c in co]
    scn = ".".join(scn)
    scn = f".1.{len_scn}{scn}"
    return scn

def parse_detectors_status(hex_string):
    """–ü–∞—Ä—Å–∏—Ç hex-—Å—Ç—Ä–æ–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å—ã –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤"""
    if not hex_string or hex_string == "None" or not hex_string.startswith("0x"):
        return []
    
    # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –Ω–µ–ø–µ—á–∞—Ç–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    hex_string = ''.join(hex_string.split())
    hex_string = hex_string.strip()
    
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "0x"
    hex_data = hex_string[2:]
    
    # –î–µ–ª–∏–º —Å—Ç—Ä–æ–∫—É –Ω–∞ 4 —Ä–∞–≤–Ω—ã–µ —á–∞—Å—Ç–∏
    part_length = len(hex_data) // 4
    if part_length == 0:
        return []
    
    # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å
    first_part = hex_data[:part_length]
    
    # –ö–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª –≤ –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏ - —ç—Ç–æ —Å—Ç–∞—Ç—É—Å –æ–¥–Ω–æ–≥–æ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
    detectors_status = list(first_part)
    
    return detectors_status

def reorder_detectors(detectors):
    """–ü–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ—Ç –¥–µ—Ç–µ–∫—Ç–æ—Ä—ã —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª—É: 2,1,4,3,6,5 –∏ —Ç.–¥."""
    if not detectors:
        return []
    
    reordered = []
    for i in range(0, len(detectors), 2):
        if i + 1 < len(detectors):
            # –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ –ø–∞—Ä—ã: –±–µ—Ä–µ–º –≤—Ç–æ—Ä–æ–π, –∑–∞—Ç–µ–º –ø–µ—Ä–≤—ã–π
            reordered.append(detectors[i + 1])
            reordered.append(detectors[i])
        else:
            # –ï—Å–ª–∏ –Ω–µ—á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–∞ –º–µ—Å—Ç–µ
            reordered.append(detectors[i])
    
    return reordered

def get_emoji_status(status_char):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞"""
    return "‚ö™" if status_char == '0' else "üü¢"

def get_current_time_with_ms():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞–º–∏"""
    current_time = time.time()
    milliseconds = int((current_time - int(current_time)) * 1000)
    time_struct = time.localtime(current_time)
    return time.strftime("%H:%M:%S", time_struct) + f".{milliseconds:03d}"

async def get_ug405(ip_address):
    try:
        ipaddress.IPv4Address(ip_address)
    except ipaddress.AddressValueError:
        return "Invalid IP Address"

    community_string = "UTMC"
    oid_get_request = ".1.3.6.1.4.1.13267.3.2.4.2.1.15"
    
    # –ü–æ–ª—É—á–∞–µ–º SCN
    old_str = await snmp_get_next_request(ip_address, community_string, oid_get_request)
    
    if old_str is not None:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤
        oid_get = f".1.3.6.1.4.1.13267.3.2.5.1.1.32{old_str}"
        response = await snmp_get_request(ip_address, community_string, oid_get)
        return response
    
    return None

async def main():
    ip = "10.45.154.11"
    num_detectors = 0
    first_run = True
    
    while True:
        result = await get_ug405(ip)
        
        if result:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞–º–∏
            current_time = get_current_time_with_ms()
            # –í—ã–≤–æ–¥–∏–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            print(f"[{current_time}] Raw data: '{result}'")
            
            # –ü–∞—Ä—Å–∏–º —Å—Ç–∞—Ç—É—Å—ã –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤
            detectors = parse_detectors_status(result)
            
            # –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤
            if first_run and detectors:
                num_detectors = len(detectors)
                print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤: {num_detectors}")
                first_run = False
            
            if detectors:
                # –ü–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä—ã
                reordered_detectors = reorder_detectors(detectors)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –≤—ã–≤–æ–¥–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                output = f""
                detector_outputs = []
                
                for i, status in enumerate(reordered_detectors[:num_detectors], 1):
                    emoji = get_emoji_status(status)
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —à–∏—Ä–∏–Ω–æ–π
                    detector_outputs.append(f"D{i:2d}={status}{emoji}")
                
                output += ", ".join(detector_outputs)
                print(output)
            else:
                current_time = get_current_time_with_ms()
                print(f"[{current_time}] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
        else:
            current_time = get_current_time_with_ms()
            print(f"[{current_time}] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
        
        await asyncio.sleep(0.5)

if __name__ == "__main__":
    asyncio.run(main())