import asyncio
import ipaddress
import time
import os
from datetime import datetime
from pysnmp.hlapi.asyncio import *

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç –∏–∑ .env
SCAN_MODE = os.getenv('SCAN_MODE', 'light').lower()  # 'light' –∏–ª–∏ 'full'
IP_ADDRESS = os.getenv('IP', '10.179.72.97')
SKIP_DUPLICATES = os.getenv('SKIP_DUPLICATES', 'true').lower() == 'false'  # –ü—Ä–æ–ø—É—Å–∫ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è 

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤
LOG_DIR = "logs_snmp"
os.makedirs(LOG_DIR, exist_ok=True)

# –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤ –≤ –±–∏–Ω–∞—Ä–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ (–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ–µ)
CHAR_TO_BINARY = {
    '0': '0000',  # 0000 -> 0000
    '1': '1000',  # 0001 -> 1000
    '2': '0100',  # 0010 -> 0100
    '3': '1100',  # 0011 -> 1100
    '4': '0010',  # 0100 -> 0010
    '5': '1010',  # 0101 -> 1010
    '6': '0110',  # 0110 -> 0110
    '7': '1110',  # 0111 -> 1110
    '8': '0001',  # 1000 -> 0001
    '9': '1001',  # 1001 -> 1001
    'a': '0101',  # 1010 -> 0101
    'b': '1101',  # 1011 -> 1101
    'c': '0011',  # 1100 -> 0011
    'd': '1011',  # 1101 -> 1011
    'e': '0111',  # 1110 -> 0111
    'f': '1111',  # 1111 -> 1111
}

class DualLogger:
    def __init__(self):
        self.light_log_file = None
        self.full_log_file = None
        self.setup_log_files()
    
    def setup_log_files(self):
        """–°–æ–∑–¥–∞–µ—Ç –¥–≤–∞ –ª–æ–≥-—Ñ–∞–π–ª–∞ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π –¥–ª—è light –∏ full —Ä–µ–∂–∏–º–æ–≤"""
        current_date = datetime.now().strftime("%Y-%m-%d")
        
        # –§–∞–π–ª –¥–ª—è light —Ä–µ–∂–∏–º–∞
        self.light_log_file = os.path.join(LOG_DIR, f"snmp_log_light_{current_date}.txt")
        # –§–∞–π–ª –¥–ª—è full —Ä–µ–∂–∏–º–∞  
        self.full_log_file = os.path.join(LOG_DIR, f"snmp_log_full_{current_date}.txt")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤
        for log_file, mode_name in [(self.light_log_file, "Light"), (self.full_log_file, "Full")]:
            if not os.path.exists(log_file):
                with open(log_file, 'w', encoding='utf-8') as f:
                    f.write(f"SNMP Monitor Log - {current_date} ({mode_name} Mode)\n")
                    f.write(f"Scan Mode: {SCAN_MODE}\n")
                    f.write(f"IP Address: {IP_ADDRESS}\n")
                    f.write(f"Skip Duplicates: {SKIP_DUPLICATES}\n")
                    f.write("=" * 80 + "\n\n")
    
    def check_and_update_log_files(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ –¥–∞—Ç–∞ (–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤)"""
        current_date = datetime.now().strftime("%Y-%m-%d")
        expected_light_file = os.path.join(LOG_DIR, f"snmp_log_light_{current_date}.txt")
        expected_full_file = os.path.join(LOG_DIR, f"snmp_log_full_{current_date}.txt")
        
        if self.light_log_file != expected_light_file or self.full_log_file != expected_full_file:
            self.setup_log_files()
    
    def write_light_log(self, message):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ light –ª–æ–≥-—Ñ–∞–π–ª"""
        try:
            self.check_and_update_log_files()
            with open(self.light_log_file, 'a', encoding='utf-8') as f:
                f.write(message + '\n')
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ light –ª–æ–≥: {e}")
    
    def write_full_log(self, message):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ full –ª–æ–≥-—Ñ–∞–π–ª"""
        try:
            self.check_and_update_log_files()
            with open(self.full_log_file, 'a', encoding='utf-8') as f:
                f.write(message + '\n')
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ full –ª–æ–≥: {e}")
    
    def write_both_logs(self, light_message, full_message):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–±–∞ –ª–æ–≥-—Ñ–∞–π–ª–∞"""
        self.write_light_log(light_message)
        self.write_full_log(full_message)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –ª–æ–≥–≥–µ—Ä–∞
logger = DualLogger()

async def snmp_get_request(ip, community, oid):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π SNMP GET –∑–∞–ø—Ä–æ—Å"""
    error_indication, error_status, error_index, var_binds = await getCmd(
        SnmpEngine(),
        CommunityData(community),
        UdpTransportTarget((ip, 161)),
        ContextData(),
        ObjectType(ObjectIdentity(oid)),
        lexicographicMode=True,
    )
    
    if error_indication:
        return None
    if error_status:
        return None

    for name, val in var_binds:
        return val.prettyPrint()

async def snmp_get_next_request(ip, community, oid):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π SNMP GET NEXT –∑–∞–ø—Ä–æ—Å"""
    error_indication, error_status, error_index, var_binds = await nextCmd(
        SnmpEngine(),
        CommunityData(community),
        UdpTransportTarget((ip, 161)),
        ContextData(),
        ObjectType(ObjectIdentity(oid)),
        lexicographicMode=True,
    )

    if error_indication:
        return None
    if error_status:
        return None

    # –ò–∑–≤–ª–µ–∫–∞–µ–º SCN
    co = var_binds[0][0][1].prettyPrint()
    len_scn = str(len(co)) + "."
    scn = [str(ord(c)) for c in co]
    scn = ".".join(scn)
    scn = f".1.{len_scn}{scn}"
    return scn

def parse_detectors_status(hex_string):
    """–ü–∞—Ä—Å–∏—Ç hex-—Å—Ç—Ä–æ–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å—ã –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤"""
    if not hex_string or hex_string == "None" or not hex_string.startswith("0x"):
        return []
    
    # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –Ω–µ–ø–µ—á–∞—Ç–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    hex_string = ''.join(hex_string.split())
    hex_string = hex_string.strip()
    
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "0x"
    hex_data = hex_string[2:]
    
    # –î–µ–ª–∏–º —Å—Ç—Ä–æ–∫—É –Ω–∞ 4 —Ä–∞–≤–Ω—ã–µ —á–∞—Å—Ç–∏
    part_length = len(hex_data) // 4
    if part_length == 0:
        return []
    
    # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å
    first_part = hex_data[:part_length]
    
    # –ö–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª –≤ –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏ - —ç—Ç–æ —Å—Ç–∞—Ç—É—Å –æ–¥–Ω–æ–≥–æ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
    detectors_status = list(first_part)
    
    return detectors_status

def reorder_detectors(detectors):
    """–ü–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ—Ç –¥–µ—Ç–µ–∫—Ç–æ—Ä—ã —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª—É: 2,1,4,3,6,5 –∏ —Ç.–¥."""
    if not detectors:
        return []
    
    reordered = []
    for i in range(0, len(detectors), 2):
        if i + 1 < len(detectors):
            # –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ –ø–∞—Ä—ã: –±–µ—Ä–µ–º –≤—Ç–æ—Ä–æ–π, –∑–∞—Ç–µ–º –ø–µ—Ä–≤—ã–π
            reordered.append(detectors[i + 1])
            reordered.append(detectors[i])
        else:
            # –ï—Å–ª–∏ –Ω–µ—á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–∞ –º–µ—Å—Ç–µ
            reordered.append(detectors[i])
    
    return reordered

def get_emoji_status(status_char):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞"""
    return "‚ö™" if status_char == '0' else "üü¢"

def get_emoji_from_binary(bit):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è"""
    return "‚ö™" if bit == '0' else "üü¢"

def get_current_time_with_ms():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞–º–∏"""
    current_time = time.time()
    milliseconds = int((current_time - int(current_time)) * 1000)
    time_struct = time.localtime(current_time)
    return time.strftime("%H:%M:%S", time_struct) + f".{milliseconds:03d}"

def get_current_datetime():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –ª–æ–≥–æ–≤"""
    return datetime.now().strftime("%Y-%m-%d %H:%M:%S.%f")[:-3]

def convert_to_binary_representation(detectors):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–∏–º–≤–æ–ª—ã –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤ –≤ –±–∏–Ω–∞—Ä–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ (4 —Å—Ç—Ä–æ–∫–∏)"""
    if not detectors:
        return []
    
    binary_lines = []
    
    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –±–∏–Ω–∞—Ä–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
    for detector_char in detectors:
        char_lower = detector_char.lower()
        binary_repr = CHAR_TO_BINARY.get(char_lower, '0000')
        binary_lines.append(binary_repr)
    
    # –¢—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä—É–µ–º: —Å–æ–∑–¥–∞–µ–º 4 —Å—Ç—Ä–æ–∫–∏, –∫–∞–∂–¥–∞—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –±–∏—Ç –∏–∑ –∫–∞–∂–¥–æ–≥–æ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
    result_lines = []
    for bit_position in range(4):
        line_bits = [line[bit_position] for line in binary_lines]
        result_lines.append(line_bits)
    
    return result_lines

def print_light_output(reordered_detectors, num_detectors):
    """–í—ã–≤–æ–¥ –≤ –ª–µ–≥–∫–æ–º —Ä–µ–∂–∏–º–µ"""
    detector_outputs = []
    for i, status in enumerate(reordered_detectors[:num_detectors], 1):
        emoji = get_emoji_status(status)
        detector_outputs.append(f"{emoji} {i}={status}")
    return " ".join(detector_outputs)

def print_full_output(reordered_detectors, num_detectors):
    """–í—ã–≤–æ–¥ –≤ –ø–æ–ª–Ω–æ–º —Ä–µ–∂–∏–º–µ (4 —Å—Ç—Ä–æ–∫–∏ —Å –±–∏–Ω–∞—Ä–Ω—ã–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º)"""
    binary_lines = convert_to_binary_representation(reordered_detectors[:num_detectors])
    
    output_lines = []
    for line_idx, line_bits in enumerate(binary_lines):
        detector_outputs = []
        for i, bit in enumerate(line_bits, 1):
            emoji = get_emoji_from_binary(bit)
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            original_char = reordered_detectors[i-1] if i-1 < len(reordered_detectors) else '0'
            detector_outputs.append(f"{emoji} {i}={original_char}")
        output_lines.append(" ".join(detector_outputs))
    
    return "\n".join(output_lines)

async def get_ug405(ip_address):
    try:
        ipaddress.IPv4Address(ip_address)
    except ipaddress.AddressValueError:
        return "Invalid IP Address"

    community_string = "UTMC"
    oid_get_request = ".1.3.6.1.4.1.13267.3.2.4.2.1.15"
    
    # –ü–æ–ª—É—á–∞–µ–º SCN
    old_str = await snmp_get_next_request(ip_address, community_string, oid_get_request)
    
    if old_str is not None:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤
        oid_get = f".1.3.6.1.4.1.13267.3.2.5.1.1.32{old_str}"
        response = await snmp_get_request(ip_address, community_string, oid_get)
        return response
    
    return None

async def main():
    ip = IP_ADDRESS
    num_detectors = 0
    first_run = True
    previous_raw_data = None
    
    print(f"–†–µ–∂–∏–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {SCAN_MODE}")
    print(f"IP –∞–¥—Ä–µ—Å: {ip}")
    print(f"–ü—Ä–æ–ø—É—Å–∫ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {'–í–ö–õ–Æ–ß–ï–ù' if SKIP_DUPLICATES else '–í–´–ö–õ–Æ–ß–ï–ù'}")
    print(f"–õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ø–∞–ø–∫—É: {LOG_DIR}")
    print(f"–°–æ–∑–¥–∞–Ω—ã –¥–≤–∞ –ª–æ–≥-—Ñ–∞–π–ª–∞: light –∏ full —Ä–µ–∂–∏–º—ã")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –≤ –æ–±–∞ —Ñ–∞–π–ª–∞
    start_message = f"[{get_current_datetime()}] –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
    logger.write_both_logs(start_message, start_message)
    
    mode_message = f"[{get_current_datetime()}] –†–µ–∂–∏–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {SCAN_MODE}"
    logger.write_both_logs(mode_message, mode_message)
    
    ip_message = f"[{get_current_datetime()}] IP –∞–¥—Ä–µ—Å: {ip}"
    logger.write_both_logs(ip_message, ip_message)
    
    skip_message = f"[{get_current_datetime()}] –ü—Ä–æ–ø—É—Å–∫ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {'–í–ö–õ–Æ–ß–ï–ù' if SKIP_DUPLICATES else '–í–´–ö–õ–Æ–ß–ï–ù'}"
    logger.write_both_logs(skip_message, skip_message)
    
    while True:
        result = await get_ug405(ip)
        
        if result:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã
            if SKIP_DUPLICATES and result == previous_raw_data:
                # –î–∞–Ω–Ω—ã–µ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è –∏ –ø—Ä–æ–ø—É—Å–∫ –≤–∫–ª—é—á–µ–Ω - –Ω–µ –≤—ã–≤–æ–¥–∏–º
                current_time = get_current_time_with_ms()
                # print(f"[{current_time}] üü° –î–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–≤–æ–¥")
                pass  # –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–≤–æ–¥
            else:
                # –î–∞–Ω–Ω—ã–µ –Ω–æ–≤—ã–µ –∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫ –≤—ã–∫–ª—é—á–µ–Ω - –≤—ã–≤–æ–¥–∏–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
                current_time = get_current_time_with_ms()
                current_datetime = get_current_datetime()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–º–µ—Ç–∫—É –æ –¥—É–±–ª–∏–∫–∞—Ç–µ, –µ—Å–ª–∏ —ç—Ç–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–Ω–æ–º –ø—Ä–æ–ø—É—Å–∫–µ
                duplicate_marker = "" if not SKIP_DUPLICATES and result == previous_raw_data else ""
                
                terminal_message = f"[{current_time}] Raw data: '{result}'{duplicate_marker}"
                log_message = f"[{current_datetime}] Raw data: '{result}'{duplicate_marker}"
                
                print(terminal_message)
                # –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–∏—à–µ–º –≤ –æ–±–∞ –ª–æ–≥–∞
                logger.write_both_logs(log_message, log_message)
                
                # –ü–∞—Ä—Å–∏–º —Å—Ç–∞—Ç—É—Å—ã –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤
                detectors = parse_detectors_status(result)
                
                # –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤
                if first_run and detectors:
                    num_detectors = len(detectors)
                    detectors_message = f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤: {num_detectors}"
                    print(detectors_message)
                    logger.write_both_logs(
                        f"[{get_current_datetime()}] {detectors_message}", 
                        f"[{get_current_datetime()}] {detectors_message}"
                    )
                    first_run = False
                
                if detectors:
                    # –ü–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä—ã
                    reordered_detectors = reorder_detectors(detectors)
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –¥–ª—è –æ–±–æ–∏—Ö —Ä–µ–∂–∏–º–æ–≤
                    light_output = print_light_output(reordered_detectors, num_detectors)
                    full_output = print_full_output(reordered_detectors, num_detectors)
                    
                    # –í—ã–≤–æ–¥–∏–º –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
                    if SCAN_MODE == 'light':
                        print(light_output)
                    else:  # full mode
                        print(full_output)
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã
                    logger.write_light_log(f"[{current_datetime}] {light_output}")
                    
                    # –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –ª–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –æ—Ç–¥–µ–ª—å–Ω–æ
                    for line in full_output.split('\n'):
                        logger.write_full_log(f"[{current_datetime}] {line}")
                        
                else:
                    error_message = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö"
                    print(f"[{current_time}] {error_message}")
                    logger.write_both_logs(
                        f"[{current_datetime}] {error_message}", 
                        f"[{current_datetime}] {error_message}"
                    )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ
                previous_raw_data = result
                
        else:
            current_time = get_current_time_with_ms()
            current_datetime = get_current_datetime()
            error_message = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"
            print(f"[{current_time}] {error_message}")
            logger.write_both_logs(
                f"[{current_datetime}] {error_message}", 
                f"[{current_datetime}] {error_message}"
            )

        await asyncio.sleep(0.2)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        stop_message = f"[{get_current_datetime()}] –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
        logger.write_both_logs(stop_message, stop_message)
    except Exception as e:
        error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}"
        print(error_msg)
        logger.write_both_logs(
            f"[{get_current_datetime()}] {error_msg}", 
            f"[{get_current_datetime()}] {error_msg}"
        )
